# This workflow will build and push a node.js application to an Azure Web App when there is a push to the main branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/azure/app-service/app-service-plan-manage#create-an-app-service-plan
#
# To configure this workflow:
#
# 1. For Linux apps, add an app setting called WEBSITE_WEBDEPLOY_USE_SCM and set it to true in your app **before downloading the file**.
#      For more instructions see: https://docs.microsoft.com/azure/app-service/configure-common#configure-app-settings
#
# 2. Set up a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE with the value of your Azure publish profile.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the values for the AZURE_WEBAPP_NAME, AZURE_WEBAPP_PACKAGE_PATH and NODE_VERSION environment variables  (below).
#
# For more information on GitHub Actions for Azure, refer to https://github.com/Azure/Actions
# For more samples to get started with GitHub Action workflows to deploy to Azure, refer to https://github.com/Azure/actions-workflow-samples
on:
  push:
    branches:
      - main

env:
  AZURE_WEBAPP_NAME: your-app-name    # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
  NODE_VERSION: '10.x'                # set this to the node version to use

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    environment: production
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ env.NODE_VERSION }}
    - name: npm install, build, and test
      run: |
        # Build and test the project, then
        # deploy to Azure Web App.
        npm install
        npm run build --if-present
        npm run test --if-present
    - name: 'Deploy to Azure WebApp'
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
- with the new name: Reusable workflow example

on:
  workflow_call:
    inputs:
      username:
        required: true
        type: string
    secrets:
      token:
        required: true

jobs:
  example_job:
    name: Pass input and secrets to my-action
    runs-on: ubuntu-latest
    steps:
      - uses: ./.github/actions/my-action@v1
        with:
          username: ${{ inputs.username }}
          token: ${{ secrets.token }}
เรียกเวิร์กโฟลว์ที่ใช้ซ้ำได้
คุณเรียกเวิร์กโฟลว์ที่ใช้ซ้ำได้โดยใช้usesคำสำคัญ ต่างจากเมื่อคุณใช้การดำเนินการภายในเวิร์กโฟลว์ คุณเรียกเวิร์กโฟลว์ที่นำกลับมาใช้ใหม่ได้โดยตรงภายในงาน ไม่ใช่จากภายในขั้นตอนงาน

jobs.<job_id>.uses

คุณอ้างอิงไฟล์เวิร์กโฟลว์ที่ใช้ซ้ำได้โดยใช้ไวยากรณ์:

{owner}/{repo}/{path}/{filename}@{ref}

คุณสามารถเรียกเวิร์กโฟลว์ได้หลายแบบ โดยอ้างอิงแต่ละเวิร์กโฟลว์ในงานที่แยกจากกัน

jobs:
  call-workflow-1:
    uses: octo-org/this-repo/.github/workflows/workflow-1.yml@172239021f7ba04fe7327647b213799853a9eb89
  call-workflow-2:
    uses: octo-org/another-repo/.github/workflows/workflow-2.yml@v1
ผ่านอินพุตและข้อมูลลับไปยังเวิร์กโฟลว์ที่ใช้ซ้ำได้
หากต้องการส่งอินพุตที่มีชื่อไปยังเวิร์กโฟลว์ที่เรียก ให้ใช้withคีย์เวิร์ดในงาน ใช้secretsคีย์เวิร์ดเพื่อส่งต่อความลับที่มีชื่อ สำหรับอินพุต ชนิดข้อมูลของค่าอินพุตต้องตรงกับประเภทที่ระบุในเวิร์กโฟลว์ที่เรียกว่า (บูลีน ตัวเลข หรือสตริง)

jobs:
  call-workflow-passing-data:
    uses: octo-org/example-repo/.github/workflows/reusable-workflow.yml@main
    with:
      username: mona
    secrets:
      envPAT: ${{ secrets.envPAT }}
คีย์เวิร์ดที่รองรับสำหรับงานที่เรียกว่าเวิร์กโฟลว์ที่ใช้ซ้ำได้
เมื่อคุณเรียกเวิร์กโฟลว์ที่ใช้ซ้ำได้ คุณสามารถใช้ได้เฉพาะคำสำคัญต่อไปนี้ในงานที่มีการเรียก:

jobs.<job_id>.name

jobs.<job_id>.uses

jobs.<job_id>.with

jobs.<job_id>.with.<input_id>

jobs.<job_id>.secrets

jobs.<job_id>.secrets.<secret_id>

jobs.<job_id>.needs

jobs.<job_id>.if

jobs.<job_id>.permissions

บันทึก:

หากjobs.<job_id>.permissionsไม่ได้ระบุไว้ในงานการโทร เวิร์กโฟลว์ที่เรียกจะมีสิทธิ์เริ่มต้นสำหรับไฟล์GITHUB_TOKEN. สำหรับข้อมูลเพิ่มเติม โปรดดูที่ " การตรวจสอบสิทธิ์ในเวิร์กโฟลว์ "

GITHUB_TOKENสิทธิ์ส่งผ่านจากขั้นตอนการทำงานโทรที่สามารถปรับลดลงเท่านั้น (ไม่สูง) โดยขั้นตอนการทำงานที่เรียกว่า

ตัวอย่างเวิร์กโฟลว์ของผู้โทร
ไฟล์เวิร์กโฟลว์นี้เรียกไฟล์เวิร์กโฟลว์สองไฟล์ ส่วนที่สองของสิ่งเหล่านี้workflow-B.yml(แสดงในตัวอย่างเวิร์กโฟลว์ที่ใช้ซ้ำได้ ) จะถูกส่งผ่านอินพุต ( username) และความลับ ( token)

YAML
name: Call a reusable workflow

on:
  pull_request:
    branches:
      - main

jobs:
  call-workflow:
    uses: octo-org/example-repo/.github/workflows/workflow-A.yml@v1

  call-workflow-passing-data:
    uses: octo-org/example-repo/.github/workflows/workflow-B.yml@main
    with:
      username: mona
    secrets:
      token: ${{ secrets.TOKEN }}
การใช้ผลลัพธ์จากเวิร์กโฟลว์ที่ใช้ซ้ำได้
เวิร์กโฟลว์ที่ใช้ซ้ำได้อาจสร้างข้อมูลที่คุณต้องการใช้ในเวิร์กโฟลว์ของผู้โทร เมื่อต้องการใช้ผลลัพธ์เหล่านี้ คุณต้องระบุให้เป็นผลลัพธ์ของเวิร์กโฟลว์ที่ใช้ซ้ำได้

เวิร์กโฟลว์ที่ใช้ซ้ำได้ต่อไปนี้มีงานเดียวที่มีสองขั้นตอน ในแต่ละขั้นตอนเหล่านี้ เราตั้งค่าคำเดียวเป็นผลลัพธ์: "สวัสดี" และ "โลก" ในoutputsส่วนของงานที่เรา map ผลขั้นตอนเหล่านี้เพื่อผลงานที่เรียกว่า: และoutput1 output2ในon.workflow_call.outputsส่วนของเราก็กำหนดสองออกสำหรับขั้นตอนการทำงานของตัวเองที่เรียกว่าหนึ่งfirstwordซึ่งเราจะ map output1และหนึ่งเรียกว่าซึ่งเราแมปไปsecondwordoutput2

YAML
name: Reusable workflow

on:
  workflow_call:
    # Map the workflow outputs to job outputs
    outputs:
      firstword:
        description: "The first output string"
        value: ${{ jobs.example_job.outputs.output1 }}
      secondword:
        description: "The second output string"
        value: ${{ jobs.example_job.outputs.output2 }}

jobs:
  example_job:
    name: Generate output
    runs-on: ubuntu-latest
    # Map the job outputs to step outputs
    outputs:
      output1: ${{ steps.step1.outputs.firstword }}
      output2: ${{ steps.step2.outputs.secondword }}
    steps:
      - id: step1
        run: echo "::set-output name=firstword::hello"
      - id: step2
        run: echo "::set-output name=secondword::world"
ตอนนี้เราสามารถใช้เอาต์พุตในเวิร์กโฟลว์ของผู้โทรได้ เช่นเดียวกับที่คุณจะใช้เอาต์พุตจากงานภายในเวิร์กโฟลว์เดียวกัน เราอ้างอิงผลโดยใช้ชื่อที่กำหนดไว้ในระดับขั้นตอนการทำงานในขั้นตอนการทำงานนำมาใช้ใหม่: และfirstword secondwordในเวิร์กโฟลว์นี้job1เรียกเวิร์กโฟลว์ที่ใช้ซ้ำได้และjob2พิมพ์ผลลัพธ์จากเวิร์กโฟลว์ที่ใช้ซ้ำได้ ("hello world") ไปยังเอาต์พุตมาตรฐานในบันทึกเวิร์กโฟลว์

YAML
name: Call a reusable workflow and use its outputs

on:
  workflow_dispatch:

jobs:
  job1:
    uses: octo-org/example-repo/.github/workflows/called-workflow.yml@v1

  job2:
    runs-on: ubuntu-latest
    needs: job1
    steps:
      - run: echo ${{ needs.job1.outputs.firstword }} ${{ needs.job1.outputs.secondword }}
สำหรับข้อมูลเพิ่มเติมเกี่ยวกับการใช้ผลลัพธ์ของงาน โปรดดูที่ " ไวยากรณ์เวิร์กโฟลว์สำหรับ GitHub Actions "

การตรวจสอบเวิร์กโฟลว์ที่กำลังใช้งาน
คุณสามารถใช้ GitHub REST API เพื่อตรวจสอบวิธีการใช้เวิร์กโฟลว์ที่นำกลับมาใช้ใหม่ได้ การprepared_workflow_jobดำเนินการบันทึกการตรวจสอบจะถูกทริกเกอร์เมื่อเริ่มงานเวิร์กโฟลว์ รวมอยู่ในข้อมูลที่บันทึกไว้คือ:

repo- องค์กร/ที่เก็บที่มีงานเวิร์กโฟลว์ตั้งอยู่ สำหรับงานที่เรียกเวิร์กโฟลว์อื่น นี่คือองค์กร/ที่เก็บของเวิร์กโฟลว์ผู้โทร
@timestamp - วันที่และเวลาที่เริ่มงาน ในรูปแบบ Unix epoch
job_name - ชื่อของงานที่เรียกใช้
job_workflow_ref- ไฟล์เวิร์กโฟลว์ที่ใช้ในรูปแบบ{owner}/{repo}/{path}/{filename}@{ref}. สำหรับงานที่เรียกเวิร์กโฟลว์อื่น สิ่งนี้จะระบุเวิร์กโฟลว์ที่เรียกว่า
สำหรับข้อมูลเกี่ยวกับการใช้ REST API เพื่อสืบค้นบันทึกการตรวจสอบสำหรับองค์กร โปรดดูที่ " องค์กร "

หมายเหตุ : ข้อมูลการตรวจสอบprepared_workflow_jobสามารถดูได้โดยใช้ REST API เท่านั้น ไม่ปรากฏในเว็บอินเตอร์เฟส GitHub หรือรวมอยู่ในข้อมูลการตรวจสอบที่ส่งออก JSON/CSV

ขั้นตอนถัดไป
หากต้องการเรียนรู้เกี่ยวกับ GitHub Actions ต่อไป โปรดดู " เหตุการณ์ที่ทริกเกอร์เวิร์กโฟลว์ "

เอกสารนี้ช่วยคุณได้หรือไม่?
นโยบายความเป็นส่วนตัว
ช่วยเราทำให้เอกสารเหล่านี้ยอดเยี่ยม!
เอกสาร GitHub ทั้งหมดเป็นโอเพ่นซอร์ส เห็นอะไรผิดปกติหรือไม่ชัดเจน? ส่งคำขอดึง

หรือเรียนรู้วิธีการมีส่วนร่วม

ยังคงต้องการความช่วยเหลือ?
ถามชุมชน GitHub
ติดต่อฝ่ายสนับสนุน
© 2021 GitHub, Inc.
เงื่อนไข
ความเป็นส่วนตัว
ความปลอดภัย
สถานะ
ช่วย
ติดต่อ GitHub
ราคา
นักพัฒนา API
การฝึกอบรม
บล็อก
เกี่ยวกับ
-jobs:
  call-workflow-passing-data:
    uses: octo-org/example-repo/.github/workflows/reusable-workflow.yml@main
    with:
      username: mona
    secrets:
      envPAT: ${{ secrets.envPAT }}
- jobs:
  reusable_workflow_job:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: ./.github/actions/my-action@v1
        with:
          username: ${{ inputs.username }}
          token: ${{ secrets.envPAT }}
-
on:
  workflow_call:
    inputs:
      username:
        required: true
        type: string
    secrets:
      envPAT:
        required: true
- วาสคริปต์ ( @octokit/core.js )
await octokit.request('GET /user/gpg_keys')
การตอบสนอง
Status: 200 OK
[
  {
    "id": 3,
    "primary_key_id": 2,
    "key_id": "3262EFF25BA0D270",
    "public_key": "xsBNBFayYZ...",
    "emails": [
      {
        "email": "mastahyeti@users.noreply.github.com",
        "verified": true
      }
    ],
    "subkeys": [
      {
        "id": 4,
        "primary_key_id": 3,
        "key_id": "4A595D4C72EE49C7",
        "public_key": "zsBNBFayYZ...",
        "emails": [],
        "subkeys": [],
        "can_sign": false,
        "can_encrypt_comms": true,
        "can_encrypt_storage": true,
        "can_certify": false,
        "created_at": "2016-03-24T11:31:04-06:00",
        "expires_at": "2016-03-24T11:31:04-07:00"
      }
    ],
    "can_sign": true,
    "can_encrypt_comms": false,
    "can_encrypt_storage": false,
    "can_certify": true,
    "created_at": "2016-03-24T11:31:04-06:00",
    "expires_at": "2016-03-24T11:31:04-07:00",
    "raw_key": "string"
  }
]
ไม่ดัดแปลง
Status: 304 Not Modified
ต้องมีการตรวจสอบสิทธิ์
Status: 401 Unauthorized
ต้องห้าม
Status: 403 Forbidden
ไม่พบทรัพยากร
Status: 404 Not Found
 สร้างคีย์ GPG สำหรับผู้ใช้ที่ตรวจสอบสิทธิ์
เพิ่มคีย์ GPG ให้กับบัญชี GitHub ของผู้ใช้ที่ตรวจสอบสิทธิ์ ต้องการให้คุณได้รับการรับรองความถูกต้องผ่านการตรวจสอบสิทธิ์พื้นฐานหรือ OAuth ที่มีอย่างน้อยขอบเขตwrite:gpg_key

POST /user/gpg_keys
พารามิเตอร์
ชื่อ	พิมพ์	ใน	คำอธิบาย
accept	สตริง	หัวข้อ	
แนะนำให้ตั้งค่า เป็นapplication/vnd.github.v3+json

armored_public_key	สตริง	ร่างกาย	
จำเป็นต้องใช้ คีย์ GPG ในรูปแบบหุ้มเกราะ ASCII

ตัวอย่างโค้ด
เปลือก
curl \
  -X POST \
  -H "Accept: application/vnd.github.v3+json" \
  https://{hostname}/api/v3/user/gpg_keys \
  -d '{"armored_public_key":"armored_public_key"}'
จาวาสคริปต์ ( @octokit/core.js )
await octokit.request('POST /user/gpg_keys', {
  armored_public_key: 'armored_public_key'
})
การตอบสนอง
Status: 201 Created
{
  "id": 3,
  "primary_key_id": 2,
  "key_id": "3262EFF25BA0D270",
  "public_key": "xsBNBFayYZ...",
  "emails": [
    {
      "email": "mastahyeti@users.noreply.github.com",
      "verified": true
    }
  ],
  "subkeys": [
    {
      "id": 4,
      "primary_key_id": 3,
      "key_id": "4A595D4C72EE49C7",
      "public_key": "zsBNBFayYZ...",
      "emails": [],
      "subkeys": [],
      "can_sign": false,
      "can_encrypt_comms": true,
      "can_encrypt_storage": true,
      "can_certify": false,
      "created_at": "2016-03-24T11:31:04-06:00",
      "expires_at": "2016-03-24T11:31:04-07:00"
    }
  ],
  "can_sign": true,
  "can_encrypt_comms": false,
  "can_encrypt_storage": false,
  "can_certify": true,
  "created_at": "2016-03-24T11:31:04-06:00",
  "expires_at": "2016

